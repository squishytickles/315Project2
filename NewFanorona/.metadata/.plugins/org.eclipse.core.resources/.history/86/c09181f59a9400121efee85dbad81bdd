import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.imageio.ImageIO;
import javax.swing.*;

public class game extends JApplet{

	JPanel content;
	private MainPanel mainWin;
	private InstrPanel instrWin;
	private GamePanel gameWin;

	static final int MAIN_WIDTH = 750;
	static final int MAIN_HEIGHT = 450;
	static final int SPEED = 100;
	
	Button instructions;
	Button newGame;

	//initialize all Panels
	public void init()
	{
		//create main menu window
		JFrame mainMenu = new JFrame("FANORONA");
		mainMenu.setSize(MAIN_WIDTH, MAIN_HEIGHT);
		mainMenu.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel content = new JPanel();
		content.setLayout(new CardLayout());
		
		mainWin = new MainPanel(content);
		instrWin = new InstrPanel(content);
		gameWin = new GamePanel(content);
		
		content.add(mainWin, "Main Menu");
		content.add(instrWin, "Instructions");
		content.add(gameWin, "Fanorona");
		
		mainMenu.setContentPane(content);
        mainMenu.pack();   
        mainMenu.setLocationByPlatform(true);
        mainMenu.setVisible(true);
		
	}
}

//Panel Classes
class MainPanel extends JPanel
{
	private JPanel content;
	private JLabel text;
	private JButton instructions;
	private JButton newGame;
	
	private BufferedImage mainImage;
	
	//create the main Panel
	public MainPanel(JPanel mainWin){
		content = mainWin;
		
		//set welcome text
		text = new JLabel("Welcome to Fanorona");
		
		//set size of main window
		setPreferredSize(new Dimension(750, 450));
		this.setLayout(new FlowLayout());
		
		//create buttons
		instructions = new JButton("Instructions");
		newGame = new JButton("New Game");
		
		//import game board image
		try {
			mainImage = ImageIO.read(new File("img/main.jpg"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
				
		instructions.addActionListener( new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                CardLayout layout = (CardLayout) content.getLayout();
                layout.next(content);
            }
        });
		
		newGame.addActionListener( new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                CardLayout layout = (CardLayout) content.getLayout();
                layout.last(content);
            }
        });
		
		repaint();
		add(instructions);
		add(newGame);
		add(text);
	}

	//draw the main menu's background
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
	    g.drawImage(mainImage, 0, 0, null);
	  }
}

class InstrPanel extends JPanel {
	private JPanel content;
	private JLabel instr;
	private JButton back;
	
	//create the Instructions Panel
	public InstrPanel(JPanel mainWin) {
		content = mainWin;
		
		//set size of window
		setLayout(new FlowLayout());
		setPreferredSize(new Dimension(750,450));
		
		//create instructions text
		instr = new JLabel("<html>INSTRUCTIONS: <br><html>" 
			   + "<html>Step 1: click the piece you want to move<br><html>"
			   + "<html>Step 2: click the place on the board you want to move to<br><html>"
			   + "<html>Step 3: blah blah... to be continued<br><html>");
		
		//create back button
		back = new JButton("Back");
		
		//set button action to go back to main menu
		back.addActionListener( new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                CardLayout layout = (CardLayout) content.getLayout();
                layout.first(content);
            }
        });
		
		//add button and text to window
		add(instr);
		add(back);
	}
}

class GamePanel extends JPanel {
	private JPanel content;
	private JButton back;
	
	private BufferedImage gameboard;
	
	//variables for pieces
	static int RADIUS = 15;
	static int SPACE = 22;
	static int LENGTH = 5;
	static int HEIGHT = 9;
	static final int OFFSET = 30;
	static final int PADDING = 72;
	static int HEADER = 25;
	public int[][] pieceMap = new int[LENGTH][HEIGHT];
	
	Graphics g;
	private BufferedImage gameBoard;
	
	//create the GamePanel
	public GamePanel(JPanel mainWin) {
		content = mainWin;
		
		this.setLayout(new FlowLayout());
		setPreferredSize(new Dimension(750,450));
		back = new JButton("Back");
		
		//import game board image
		try {
			gameBoard = ImageIO.read(new File("img/gameboard.png"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		//set button action to go back to main menu
		back.addActionListener( new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                CardLayout layout = (CardLayout) content.getLayout();
                layout.first(content);
            }
        });
		
		repaint();
		add(back);
		//draw(g);	
			
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		g.drawImage(gameBoard, 0, 0, null);
	}
	
	private void mapDefaultPieces() {
		// map top 2 rows as 1
		for (int j = 0; j < 2; j ++) {
			for (int i = 0; i < LENGTH; i ++) {
				pieceMap[i][j] = 1;
			}
		}

		// map bottom 2 rows as 2
		for (int j = HEIGHT - 1; j > HEIGHT - 2 - 1; j --) {
			for (int i = 0; i < LENGTH; i ++) {
				pieceMap[i][j] = 2;
			}
		}

		// manually set middle row
		pieceMap[0][2] = 1; pieceMap[2][2] = 1; pieceMap[5][2] = 1; pieceMap[7][2] = 1;
		pieceMap[1][2] = 2; pieceMap[3][2] = 2; pieceMap[6][2] = 2; pieceMap[8][2] = 2;
	}
	
	public static void drawCircleCentered(Color c, int x, int y, int r, Graphics g) {
		g.setColor(c);
		g.fillOval(x - r, y - r, r * 2, r * 2);
	}
	
	static void drawPiece(Color c, int x, int y, Graphics g) {
		drawCircleCentered(Color.DARK_GRAY, x, y, RADIUS, g);
		drawCircleCentered(c, x, y, RADIUS - 2, g);
	}
	
	static void drawPieces(int[][] pieceMap, Graphics g) throws RuntimeException {
		// 0 indicates an empty place
		// 1 indicates a team1 piece
		// 2 indicates a team2 piece
		for (int i = 0; i < LENGTH; i ++) {
			for (int j = 0; j < HEIGHT; j ++) {

				// calculate the positions on the gameboard
				int this_x = OFFSET + i * PADDING;
				int this_y = HEADER + OFFSET + j * PADDING;

				switch(pieceMap[i][j]) {				
					case 0: {
						// do nothing
					}
					break;
					case 1: {
						drawPiece(Color.BLACK, this_x, this_y, g);
					}
					break;
					case 2: {
						drawPiece(Color.WHITE, this_x, this_y, g);
					}
					break;
					default: {
						throw new RuntimeException("Unknown gameboard data, check the values of pieceMap");
					}
				}
			}
		}
	}
	
	public void draw(Graphics g) {
		
		
		// draw the pieces
		drawPieces(pieceMap, g);
	}
}


